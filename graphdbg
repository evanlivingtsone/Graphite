#!/bin/bash

# Evan Livingstone 
# Script for automating graphite debugging process.

# TODO: add "benchmark" option - currently only handles apps!



# Usage examples:

# 	Graphite debugging:
# 	graphdbg -g ping_pong_app_test 

#	Application debugging:
#	graphdbg -a ping_pong_app_test

#	Configure Graphite for "graphite" debugging:
#	graphdbg configure graphite

#	Configure Graphite for "application" debugging:
#	graphdbg configure application

#	Reset Graphite to non-debugging mode:
#	graphdbg configure reset


# Example output from make command for graphite debugging:
# 	Pausing to attach to pid 18239
# 	To load the tool's debug info to gdb use:
#   		add-symbol-file /home/flute/Documents/graphite/graphite_source/tests/apps/ping_pong/../../../lib/pin_sim.so 0x2af9c90e4050 -s .data 0x2af9c992aa40 -s .bss 0x2af9c99365c0

# Example output from make command for application debugging:
# 	Application stopped until continued from debugger.
# 	Start GDB, then issue this command at the (gdb) prompt:
# 	   target remote :44091


##### Functions

usage()
{
	echo "Usage: 
		For debugging a Graphite model: graphdbg -g ping_pong_app_test
		For debugging an application:	graphdbg -a ping_pong_app_test
	
		For configuration: graphdbg configure [graphite/application/reset]"
}

configure_graphite()
{	
	sed -i.tmp "s/^\(DBG *= *\).*/\1true/" "$graphite_dir/common/Makefile.common"
	sed -i.tmp "s/^\(DEBUG *?= *\).*/\1graphite/" "$graphite_dir/tests/Makefile.tests"
	echo "Configured Graphite environment for graphite debugging."
	configure_rm_tmps
}

configure_application()
{
	sed -i.tmp "s/^\(DBG *= *\).*/\1true/" "$graphite_dir/common/Makefile.common"
	sed -i.tmp "s/^\(DEBUG *?= *\).*/\1app/" "$graphite_dir/tests/Makefile.tests"
	echo "Configured Graphite environment for application debugging."
	configure_rm_tmps
}

configure_reset()
{
	sed -i.tmp "s/^\(DBG *= *\).*/\1false/" "$graphite_dir/common/Makefile.common"
	sed -i.tmp "s/^\(DEBUG *?= *\).*/\1none/" "$graphite_dir/tests/Makefile.tests"
	echo "Reset Graphite environment - it is NOT in debug mode."
	configure_rm_tmps
}

configure_rm_tmps()
{
	command=r
	echo -n "Delete temporary files? (y/n): "
	read command
	if [ "$command" == 'y' ]; then
		rm "$graphite_dir/common/Makefile.common.tmp"
		rm "$graphite_dir/tests/Makefile.tests.tmp" 
	else
		echo "Temporary backup files were not deleted."
	fi
}

# function takes 1 arg
verify_mode()
{
	key_val=
	case $1 in
		a )	key_val=app	
			;;
		g )	key_val=graphite 
			;;
		* )	return 1
			;;
	esac
	
	flag=false
	
	while read line; do 
		var_val=$(sed "s/^DBG *= *\(.*\)$/\1/" <<<$line)
		if [[ $var_val == true ]]; then
			flag=true
		fi      
	done < "$graphite_dir/common/Makefile.common"
	
	if [[ $flag == false ]]; then 
		echo "Project is NOT in app or graphite debug mode. Use configure option to set in debug mode."
		usage
		exit 1
	else
		flag=false
	fi

	while read line; do 
		var_val=$(sed "s/^DEBUG *?= *\(.*\)$/\1/" <<<$line)
		if [[ $var_val == $key_val ]]; then
			flag=true
		fi      
	done < "$graphite_dir/tests/Makefile.tests"
	
	if [[ $flag == false ]]; then 
		echo "Project is NOT in $key_val debug mode. Use configure option to set in debug mode."
		usage
		exit 1
	fi

	return 0
}

debug_graphite()
{
	verify_mode g
	
	if [[ $? != 0 ]]; then 
		echo "Internal error. Check script."
		exit 1
	fi

	if [ -z "$pinbin_path" ]; then
		echo "Error: must set pinbin path in the script file before running."
		exit 1
	fi
	
	make "$test_name" | tee >(
		while IFS= read -r line; do
			if [[ $line == *"Pausing to attach to pid"* ]]; then 
				pid=$(sed 's/.*Pausing to attach to pid \([0-9]*\).*/\1/' <<< "$line")
				#echo "DETECTED PID: $pid"
			elif [[ $line == *"add-symbol-file"* ]]; then
				if [ -z "$pid" ]; then 
					echo "PID NOT FOUND... EXITING"
					exit 1
				fi
				
				# strip line of leading spaces
				symbcmd=$(sed 's/^[[:space:]]\+//' <<< "$line")
				#echo "DETECTED SYMB CMD: "$symbcmd""
				
				gdbcmd="gdb $pinbin_path -ex \"attach $pid\" -ex \"$symbcmd\" -tui"
				#echo "GDBCMD COMMAND IS: $gdbcmd"
				
				sudo gnome-terminal --maximize -e "$gdbcmd" &>/dev/null & disown -a
			fi
		done)
}

debug_application()
{
	verify_mode a
	
	if [[ $? != 0 ]]; then 
		echo "Internal error. Check script."
		exit 1
	fi
	
	make "$test_name" | tee >(
		while IFS= read -r line; do
			if [[ $line == *"target remote"* ]]; then 
				pid=$(sed 's/.*target remote :\([0-9]*\).*/\1/' <<< "$line")
				echo "DETECTED PID: $pid"
				
				appname=$(sed 's/\(.*\)_app_test/\1/' <<< "$test_name")
				gdbcmd="gdb tests/apps/$appname/$appname -ex \"target remote :$pid;\" -tui"
				echo "GDB COMMAND IS: $gdbcmd"
				
				sudo gnome-terminal --maximize -e "$gdbcmd" &>/dev/null & disown -a
				break
			fi
		done)
}



##### Main

test_name=
test_type=
configure_type=
pinbin_path=~/Documents/graphite/tools/pin-2.13-62141-gcc.4.4.7-linux/intel64/bin/pinbin
graphite_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

if [ "$1" == "" ]; then 
	echo "Must provide at least one parameter..."
	usage
	exit 1
fi

while [ "$1" != "" ]; do
	case $1 in
		-a | --application ) 	shift
					test_name=$1
					test_type="application"	
					;;
		-g | --graphite ) 	shift 
					test_name=$1
					test_type="graphite"			
					;;
		configure )		shift
					configure_type=$1
					;;
		-h | --help ) 		usage
					exit
					;;
		* )			usage
					exit 1
	esac
	shift		
done 

if [ -n "$configure_type" ]; then 
	if [ ! -f "$graphite_dir/carbon_sim.cfg" ]; then
		echo "Error: run command from Graphite root directory for configuration. Root directory is expected to have the carbon_sim.cfg file."
		exit 1
	fi
	
	case $configure_type in
		graphite )	configure_graphite
				;;
		application )	configure_application
				;;
		reset ) 	configure_reset
				;;
		* )		usage
				exit 1
				;;
	esac
		
fi

if [ -n "$test_name" ]; then
	
	case $test_type in
		application ) 	debug_application
				;;
		graphite )	debug_graphite
				;;
		* )		usage
				exit 1
				;;
	esac
fi

exit 0






# RECORD OF FAILED ATTEMPTS:

#1
#make hello_world_app_test|tee > (read -r cmd; xterm -e "gdb -ex "$cmd"" &>/dev/null & disown -a;)

#2
#ping google.com|tee >(read -r line; echo "THIS IS READ: $line")

#3
#ping google.com >(tee while read line;do;echo "Reading command output in loop: $line";done)

#3
#ping google.com |tee
#  while IFS= read -r line
#  do
#    echo  "READING: $line"
#  done


#4
# redirect command stdin to fd 3 
#exec 3< <(ping google.com)
# read output line by line 
#while read line; do
#	echo "Current read line is: '$line'"
#	
#	case "$line" in 
#		*bytes*)
#		# do stuff
#		echo "'$line' contains bytes. Exiting loop."
#		found=1
#		break
#		;;
#	esac
#done <&3 
#
# close file descriptor 3
#exec 3<&-
#
#if [ "$found" = "1" ]; then 
#	exit 0 #success
#else 
#	exit 1 #failure
#fi 


#5 (works)

#echo Starting script...
#
#timeout 10s ping google.com | tee >(while IFS= read -r line; do echo "# $line" > tmp_file; done;)
#
#exit 0

